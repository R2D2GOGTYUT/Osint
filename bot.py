import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
import os

API_TOKEN = '–¢–û–ö–ï–ù'
PROMOCODE = "Ikona2t2"
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å: –∫—Ç–æ –≤–≤—ë–ª –ø—Ä–æ–º–æ–∫–æ–¥
authorized_users = set()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="–ú–∞–Ω—É–∞–ª ‚Ññ1")],
    [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É")],
    [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û")],
    [KeyboardButton(text="–ü–æ–∏—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")],
    [KeyboardButton(text="–ú–∞–Ω—É–∞–ª ‚Ññ5")],
    [KeyboardButton(text="–ú–∞–Ω—É–∞–ª ‚Ññ7")],
    [KeyboardButton(text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞–Ω—É–∞–ª?")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    if message.from_user.id not in authorized_users:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞–Ω—É–∞–ª:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if user_id not in authorized_users:
        if message.text.strip() == PROMOCODE:
            authorized_users.add(user_id)
            await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –º–∞–Ω—É–∞–ª
    file_map = {
        "–ú–∞–Ω—É–∞–ª ‚Ññ1": "manual_1.txt",
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É": "search_number.txt",
        "–ü–æ–∏—Å–∫ –ø–æ –§–ò–û": "search_name.txt",
        "–ü–æ–∏—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö": "databases.txt",
        "–ú–∞–Ω—É–∞–ª ‚Ññ5": "manual_5.txt",
        "–ú–∞–Ω—É–∞–ª ‚Ññ7": "manual_7.txt",
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞–Ω—É–∞–ª?": "top_manual.txt"
    }

    file_name = file_map.get(message.text)
    if file_name:
        path = os.path.join("manuals", file_name)
        if os.path.exists(path):
            doc = FSInputFile(path)
            await message.answer_document(doc)
        else:
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ manuals.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())